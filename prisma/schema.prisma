// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  address       String              @id
  credits       BigInt              @default(0)
  rentedFiles   File[]
  recharges     Bills[]
  telegramId    TelegramEndPoints[]
  apiKeys       ApiKeys[]
  creditUsage   CreditUsage[]
}

model File {
  id              Int      @id @unique @default(autoincrement())
  hash            String?
  name            String   @default("")
  expires_in_days Int
  createdBy       User     @relation(fields: [createdBy_email], references: [address])
  createdBy_email String
   // these are the fields that are written by the workers.....
  workedBy        String?
  sessionId       String?
  rentalStatus    String?
  updated_on      DateTime
  created_on      DateTime @default(now())
  listType        ListType
}

enum ListType {
  DEV
  RENTAL
}

model Bills {
  billId           String   @id @default(uuid())
  recipient        User     @relation(fields: [createdFor_email], references: [address])
  txnHash          String
  payableAmount    BigInt
  createdFor_email String
  credits          BigInt
  created_on       DateTime @default(now())
}

model TelegramEndPoints {
  username   String @unique()
  owner      User   @relation(fields: [nameHolder], references: [address])
  chatId     String
  nameHolder String
}

model ApiKeys {
  key        String @id @default(uuid())
  tagName    String @unique()
  owner      User   @relation(fields: [nameHolder], references: [address])
  nameHolder String
}

model CreditUsage {
  id        Int      @id @default(autoincrement())
  userAddr    String
  user      User     @relation(fields: [userAddr], references: [address]) 
  credits   BigInt 
  timestamp DateTime @default(now())
}
